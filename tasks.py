 # -*- coding: utf-8 -*-
import functools
import os

import invoke


def _out(name, message):
    print('[\033[1;37m{}\033[0m] {}'.format(name, message))


@invoke.task(name='test')
def development_test(ctx, verbose=True, coverage=False, **kwargs):
    out = functools.partial(_out, 'development.test')
    hide = 'out' if not verbose else None
    pytest = 'py.test tests/'

    if coverage:
        out('Running tests (with Coverage report).')
        ctx.run('coverage run --branch --source base -m %s' % pytest, pty=True, hide=hide)
        ctx.run('coverage html', pty=True, hide=hide)
        ctx.run('open htmlcov/index.html')
    else:
        out('Running tests.')
        ctx.run('%s' % pytest, pty=True, hide=hide)


@invoke.task(name='deploy', pre=[development_test])
def deploy(ctx, verbose=False, migrate=False, **kwargs):
    out = functools.partial(_out, 'project.deploy')
    hide = 'out' if not verbose else None

    # Ready? Let's go.
    if migrate:
        out('Snapshotting the production database.')
        ctx.run('heroku pgbackups:capture --expire', hide=hide)
        out('The migrations flag has been triggered, disable preboot.')
        ctx.run('heroku labs:disable preboot', hide=hide)

    out('Deploying project to Heroku.')
    ctx.run('git push heroku master')

    if migrate:
        out('Deploy to Heroku complete. Migrating...')
        ctx.run('heroku run python manage.py migrate')
        out('Re-enabling preboot.')
        ctx.run('heroku labs:enable preboot', hide=hide)

    # Done!
    out('All done~!')


@invoke.task(name='flake')
def development_flake(ctx, **kwargs):
    ctx.run('flake8 --max-complexity 6 > flake8.txt')


@invoke.task(name='server')
def development_server(ctx, **kwargs):
    # Use Foreman to start all the development processes.
    ctx.run('foreman start -f Procfile.dev', pty=True)


@invoke.task(name='capture')
def heroku_capture(ctx, verbose=False, **kwargs):
    out = functools.partial(_out, 'heroku.capture')
    hide = 'out' if not verbose else None

    out('Snapshotting the production database.')
    ctx.run('heroku pgbackups:capture --expire', hide=hide)


@invoke.task(name='imagekit')
def heroku_imagekit(ctx, verbose=False, **kwargs):
    out = functools.partial(_out, 'heroku.imagekit')
    hide = 'out' if not verbose else None

    ctx.run('heroku run python manage.py generateimages', hide=hide)
    out('Thumbnails successfully generated by ImageKit.')


@invoke.task(name='migrate')
def heroku_migrate(ctx, app='', **kwargs):
    ctx.run('heroku run python manage.py migrate %s' % app)


@invoke.task(name='pull')
def heroku_pull(ctx, verbose=False, database='hello-base', **kwargs):
    out = functools.partial(_out, 'heroku.pull')
    hide = 'out' if not verbose else None

    # Fetch the latest database dump.
    ctx.run('curl -o latest.dump `heroku pg:backups:url`', hide=hide)
    out('Latest database dump (latest.dump) grabbed via curl.')

    # Restore it.
    ctx.run('pg_restore --verbose --clean --no-acl --no-owner -h localhost -d %s latest.dump' % database, hide=hide)
    ctx.run('rm latest.dump', hide=hide)
    out('Restored latest production dump to local database.')


@invoke.task(name='syncdb')
def heroku_syncdb(ctx, **kwargs):
    ctx.run('heroku run python manage.py syncdb')


ns = invoke.Collection(
    deploy, development_flake, development_server, development_test,
    heroku=invoke.Collection(
        heroku_capture, heroku_imagekit, heroku_migrate, heroku_pull, heroku_syncdb,
    )
)
